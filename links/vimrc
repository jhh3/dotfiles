"""
" File ./.vimrc
"
" Quick notes:
"		F6 toggles spellcheck
"		F5 toggles paste mode
"
"""

" Load vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/vundle'

" System
Plugin 'scrooloose/nerdtree.git'
Plugin 'davidhalter/jedi-vim'
Plugin 'tpope/vim-fugitive'
Plugin 'bling/vim-airline'
Plugin 'mkitt/tabline.vim'

" Syntax
Plugin 'scrooloose/syntastic'
Plugin 'fatih/vim-go'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'lervag/vimtex'
Plugin 'Valloric/YouCompleteMe'
Plugin 'marijnh/tern_for_vim'

call vundle#end()
" Now we can turn our filetype functionality back on
filetype plugin indent on

" You Complete Me
let g:ycm_global_ycm_extra_conf = '/Users/johnholliman/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" Coloring is good -- requires terminal theme suport
syntax enable
set background=dark
colorscheme vimbrant

" Tabs to 2 spaces
set shiftwidth=2
set tabstop=2
set noexpandtab

" autoindent
set autoindent

" Highlight current line
set cursorline
hi CursorLine		cterm=NONE ctermbg=233

" toggle pasting to deal with autoindent
set pastetoggle=<F5>

" Status line --- not needed if vim-airline is working
set statusline=
set statusline+=%-3.3n\
set statusline+=%f\
set statusline+=%h%m%r%w
set statusline+=[%{strlen(&ft)?&ft:'none'},
set statusline+=%{strlen(&fenc)?&fenc:&enc},
set statusline+=%{&fileformat}]
set statusline+=%=
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\
set statusline+=%10((%l/%L,%c)%)\
set statusline+=%P

" Tabline
hi TabLine      ctermfg=Black  ctermbg=Green     cterm=NONE
hi TabLineFill  ctermfg=Black  ctermbg=Green     cterm=NONE
hi TabLineSel   ctermfg=White  ctermbg=DarkBlue  cterm=NONE

" cool tab completion stuff
set wildmenu
set wildmode=list:longest,full

" enable mouse support
set mouse=a

" line numbers
set number

" searching - ignore co<F6>ase and AI
set ignorecase
set smartcase

" toggle spelling with F4 key
map <F6> :set spell!<CR><Bar>:echo "Spell Check: " . strpart("OffOn", 3 * &spell, 3)<CR>

" format
map <F9> mzgg=G`z

" beeps are annoying
set visualbell

" Search
set hlsearch

" Title
set title

" Ruler
set ruler

" Always show status line
set laststatus=2

" Swap
set directory=/tmp//
set backupskip=/tmp/*,/private/tmp/*

" HTML configurations
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2 noexpandtab

" C configurations
autocmd FileType c setlocal colorcolumn=80

" Python configurations
autocmd FileType python setlocal shiftwidth=4 expandtab tabstop=4 softtabstop=4
autocmd FileType python setlocal colorcolumn=120

" Strip trailing whitespace (F7)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
map <F7> :call StripWhitespace()<CR>

" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_python_checkers = ['pyflakes']
let g:synastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_mode_map = { "mode": "active", "active_filetypes": [], "passive_filetypes": ["tex"] }
nnoremap <F8> :SyntasticCheck<CR> :SyntasticToggleMode<CR>

" airline settings
let g:Powerline_symbols = 'fancy'
let g:airline_powerline_fonts = 1

" NERDTree
map <C-k> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

" Exit insert with jk.
imap jk <esc>
